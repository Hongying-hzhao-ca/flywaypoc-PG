# This is a basic workflow to help you get started with Actions
 
name: db-cleanup-workflow
 
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  #push:
    #branches:
      #- release
      #- 'migrations/**'
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
env:
 
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true 
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  dev-cleanup:
    name: DEV Cleanup
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'dev' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    env:
      stage: 'Build'
      
      # Environment Secrets - In Real Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      databaseName: ${{ vars.databaseName }}
      JDBC: ${{ vars.JDBC }}  

      displayName: 'DEV Cleanup'
      executeON: true
      publishArtifacts: false
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Runs the Flyway Clean command against the Build database
      - name: Clean DEV DB
        if: env.executeON == 'true'
        run: |
          flyway -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info clean info -url="${{ env.JDBC }}" -cleanDisabled="false" -reportFilename="Reports/CleanDB" -errorOverrides="S0001:0:I-" -user=${{ secrets.USER }} -password="${{ secrets.PASSWORD }}"
          flyway -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info undo info -url="${{ env.JDBC }}" -errorOverrides="S0001:0:I-" -user=${{ secrets.USER }} -password="${{ secrets.PASSWORD }}"
          continue-on-error: true
          
  qa-cleanup:
    name: QA Cleanup
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'qa' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    needs: dev-cleanup
    env:
      stage: 'QA'
      
      # Environment Secrets - In Real Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      databaseName: ${{ vars.databaseName }}
      JDBC: ${{ vars.JDBC }}  

      displayName: 'QA Cleanup'
      executeON: true
      publishArtifacts: false
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Runs the Flyway Clean command against the Build database
      - name: Clean QA DB
        if: env.executeON == 'true'
        run: |
          flyway -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info clean info -url="${{ env.JDBC }}" -cleanDisabled="false" -reportFilename="Reports/CleanDB" -errorOverrides="S0001:0:I-" -user=${{ secrets.USER }} -password="${{ secrets.PASSWORD }}"


  prod-cleanup:
    name: PROD Cleanup
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    needs: qa-cleanup
    env:
      stage: 'PROD'
      
      # Environment Secrets - In Real Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      databaseName: ${{ vars.databaseName }}
      JDBC: ${{ vars.JDBC }}  

      displayName: 'PROD Cleanup'
      executeON: true
      publishArtifacts: false
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Runs the Flyway Clean command against the Build database
      - name: Clean PROD DB
        if: env.executeON == 'true'
        run: |
          flyway -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info clean info -url="${{ env.JDBC }}" -cleanDisabled="false" -reportFilename="Reports/CleanDB" -errorOverrides="S0001:0:I-" -user=${{ secrets.USER }} -password="${{ secrets.PASSWORD }}"
        
